1. Create schema in datbase
2. Create table as per given structure in each assignment
3. Insert Input data as per given in each assignment  
4. Write a query for problem statment 
5. Validate your result with Output

*****Assignemnt 1*********************************************************
		
		Table: Signups

		+----------------+----------+
		| Column Name    | Type     |
		+----------------+----------+
		| user_id        | int      |
		| time_stamp     | timestamp|
		+----------------+----------+
		user_id is the column of unique values for this table.
		Each row contains information about the signup time for the user with ID user_id.
		 

		Table: Confirmations

		+----------------+-----------------+
		| Column Name    | Type            |
		+----------------+-----------------+
		| user_id        | int             |
		| time_stamp     | timestamp       |
		| action         | varchar(15)     |
		+----------------+-----------------+
		(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.
		user_id is a foreign key (reference column) to the Signups table.
		action is (category) of the type ('confirmed', 'timeout')
		Each row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').
		 

		The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.

		Write a solution to find the confirmation rate of each user.

		Return the result table in any order.

		The result format is in the following example.

		 

		Example 1:

		Input: 
		Signups table:
		+---------+---------------------+
		| user_id | time_stamp          |
		+---------+---------------------+
		| 3       | 2020-03-21 10:16:13 |
		| 7       | 2020-01-04 13:57:59 |
		| 2       | 2020-07-29 23:09:44 |
		| 6       | 2020-12-09 10:39:37 |
		+---------+---------------------+
		Confirmations table:
		+---------+---------------------+-----------+
		| user_id | time_stamp          | action    |
		+---------+---------------------+-----------+
		| 3       | 2021-01-06 03:30:46 | timeout   |
		| 3       | 2021-07-14 14:00:00 | timeout   |
		| 7       | 2021-06-12 11:57:29 | confirmed |
		| 7       | 2021-06-13 12:58:28 | confirmed |
		| 7       | 2021-06-14 13:59:27 | confirmed |
		| 2       | 2021-01-22 00:00:00 | confirmed |
		| 2       | 2021-02-28 23:59:59 | timeout   |
		+---------+---------------------+-----------+
		Output: 
		+---------+-------------------+
		| user_id | confirmation_rate |
		+---------+-------------------+
		| 6       | 0.00              |
		| 3       | 0.00              |
		| 7       | 1.00              |
		| 2       | 0.50              |
		+---------+-------------------+
		Explanation: 
		User 6 did not request any confirmation messages. The confirmation rate is 0.
		User 3 made 2 requests and both timed out. The confirmation rate is 0.
		User 7 made 3 requests and all were confirmed. The confirmation rate is 1.
		User 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5.


*****Assignemnt 2*********************************************************

		Table: Employee

		+-------------+---------+
		| Column Name | Type    |
		+-------------+---------+
		| id          | int     |
		| name        | varchar |
		| department  | varchar |
		| managerId   | int     |
		+-------------+---------+
		id is the primary key (column with unique values) for this table.
		Each row of this table indicates the name of an employee, their department, and the id of their manager.
		If managerId is null, then the employee does not have a manager.
		No employee will be the manager of themself.
		 

		Write a solution to find managers with at least five direct reports.

		Return the result table in any order.

		The result format is in the following example.

		 

		Example 1:

		Input: 
		Employee table:
		+-----+-------+------------+-----------+
		| id  | name  | department | managerId |
		+-----+-------+------------+-----------+
		| 101 | John  | A          | null      |
		| 102 | Dan   | A          | 101       |
		| 103 | James | A          | 101       |
		| 104 | Amy   | A          | 101       |
		| 105 | Anne  | A          | 101       |
		| 106 | Ron   | B          | 101       |
		+-----+-------+------------+-----------+
		Output: 
		+------+
		| name |
		+------+
		| John |
		+------+


*****Assignemnt 3*********************************************************

		Table: World

		+-------------+---------+
		| Column Name | Type    |
		+-------------+---------+
		| name        | varchar |
		| continent   | varchar |
		| area        | int     |
		| population  | int     |
		| gdp         | bigint  |
		+-------------+---------+
		name is the primary key (column with unique values) for this table.
		Each row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.
		 

		A country is big if:

		it has an area of at least three million (i.e., 3000000 km2), or
		it has a population of at least twenty-five million (i.e., 25000000).
		Write a solution to find the name, population, and area of the big countries.

		Return the result table in any order.

		The result format is in the following example.

		 

		Example 1:

		Input: 
		World table:
		+-------------+-----------+---------+------------+--------------+
		| name        | continent | area    | population | gdp          |
		+-------------+-----------+---------+------------+--------------+
		| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |
		| Albania     | Europe    | 28748   | 2831741    | 12960000000  |
		| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |
		| Andorra     | Europe    | 468     | 78115      | 3712000000   |
		| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |
		+-------------+-----------+---------+------------+--------------+
		Output: 
		+-------------+------------+---------+
		| name        | population | area    |
		+-------------+------------+---------+
		| Afghanistan | 25500100   | 652230  |
		| Algeria     | 37100000   | 2381741 |
		+-------------+------------+---------+



*****Assignemnt 4*********************************************************

		table: Products

		+-------------+---------+
		| Column Name | Type    |
		+-------------+---------+
		| product_id  | int     |
		| low_fats    | cahr(2) |
		| recyclable  | char(2) |
		+-------------+---------+
		product_id is the primary key (column with unique values) for this table.
		low_fats is of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.
		recyclable is of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.
		 

		Write a solution to find the ids of products that are both low fat and recyclable.

		Return the result table in any order.

		The result format is in the following example.

		 

		Example 1:

		Input: 
		Products table:
		+-------------+----------+------------+
		| product_id  | low_fats | recyclable |
		+-------------+----------+------------+
		| 0           | Y        | N          |
		| 1           | Y        | Y          |
		| 2           | N        | Y          |
		| 3           | Y        | Y          |
		| 4           | N        | N          |
		+-------------+----------+------------+
		Output: 
		+-------------+
		| product_id  |
		+-------------+
		| 1           |
		| 3           |
		+-------------+
		Explanation: Only products 1 and 3 are both low fat and recyclable.


*****Assignemnt 5 *********************************************************

		Table: Employee

		+--------------+---------+
		| Column Name  | Type    |
		+--------------+---------+
		| id           | int     |
		| name         | varchar |
		| salary       | int     |
		| departmentId | int     |
		+--------------+---------+
		id is the primary key (column with unique values) for this table.
		departmentId is a foreign key (reference column) of the ID from the Department table.
		Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.
		 

		Table: Department

		+-------------+---------+
		| Column Name | Type    |
		+-------------+---------+
		| id          | int     |
		| name        | varchar |
		+-------------+---------+
		id is the primary key (column with unique values) for this table.
		Each row of this table indicates the ID of a department and its name.
		 

		A company's executives are interested in seeing who earns the most money in each of the company's departments. 
		A high earner in a department is an employee who has a salary in the top three unique salaries for that department.

		Write a solution to find the employees who are high earners in each of the departments.

		Return the result table in any order.

		The result format is in the following example.

		 
		Example 1:

		Input: 
		Employee table:
		+----+-------+--------+--------------+
		| id | name  | salary | departmentId |
		+----+-------+--------+--------------+
		| 1  | Joe   | 85000  | 1            |
		| 2  | Henry | 80000  | 2            |
		| 3  | Sam   | 60000  | 2            |
		| 4  | Max   | 90000  | 1            |
		| 5  | Janet | 69000  | 1            |
		| 6  | Randy | 85000  | 1            |
		| 7  | Will  | 70000  | 1            |
		+----+-------+--------+--------------+
		Department table:
		+----+-------+
		| id | name  |
		+----+-------+
		| 1  | IT    |
		| 2  | Sales |
		+----+-------+
		Output: 
		+------------+----------+--------+
		| Department | Employee | Salary |
		+------------+----------+--------+
		| IT         | Max      | 90000  |
		| IT         | Joe      | 85000  |
		| IT         | Randy    | 85000  |
		| IT         | Will     | 70000  |
		| Sales      | Henry    | 80000  |
		| Sales      | Sam      | 60000  |
		+------------+----------+--------+
		Explanation: 
		In the IT department:
		- Max earns the highest unique salary
		- Both Randy and Joe earn the second-highest unique salary
		- Will earns the third-highest unique salary

		In the Sales department:
		- Henry earns the highest salary
		- Sam earns the second-highest salary
		- There is no third-highest salary as there are only two employees


*****Assignemnt 6*********************************************************

		Table: Delivery

		+-----------------------------+---------+
		| Column Name                 | Type    |
		+-----------------------------+---------+
		| delivery_id                 | int     |
		| customer_id                 | int     |
		| order_date                  | date    |
		| customer_pref_delivery_date | date    |
		+-----------------------------+---------+
		delivery_id is the column of unique values of this table.
		The table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).
		 

		If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.

		The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.

		Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.

		The result format is in the following example.

		 

		Example 1:

		Input: 
		Delivery table:
		+-------------+-------------+------------+-----------------------------+
		| delivery_id | customer_id | order_date | customer_pref_delivery_date |
		+-------------+-------------+------------+-----------------------------+
		| 1           | 1           | 2019-08-01 | 2019-08-02                  |
		| 2           | 2           | 2019-08-02 | 2019-08-02                  |
		| 3           | 1           | 2019-08-11 | 2019-08-12                  |
		| 4           | 3           | 2019-08-24 | 2019-08-24                  |
		| 5           | 3           | 2019-08-21 | 2019-08-22                  |
		| 6           | 2           | 2019-08-11 | 2019-08-13                  |
		| 7           | 4           | 2019-08-09 | 2019-08-09                  |
		+-------------+-------------+------------+-----------------------------+
		Output: 
		+----------------------+
		| immediate_percentage |
		+----------------------+
		| 50.00                |
		+----------------------+
		Explanation: 
		The customer id 1 has a first order with delivery id 1 and it is scheduled.
		The customer id 2 has a first order with delivery id 2 and it is immediate.
		The customer id 3 has a first order with delivery id 5 and it is scheduled.
		The customer id 4 has a first order with delivery id 7 and it is immediate.
		Hence, half the customers have immediate first orders.